---
import '@styles/main.css';

export interface Props {
	title: string;
	description: string;
	image?: {
		href: string | URL,
		alt: string
	};
	type?: string;
	section?: string;
	tags?: string[];
	datePublished?: string;
	dateModified?: string;
	prev?: string;
	next?: string;
}

const {
	title,
	description,
	image = {
		href: new URL('/og_img.png', Astro.site),
		alt: `A stylized image of a design system created in Figma by John Eatmon.`
	},
	type = "website",
	section,
	tags,
	datePublished,
	dateModified,
	prev,
	next
} = Astro.props as Props;

---
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />

<title>{title} | J.M.A. Eatmon</title>

<link rel="preload" href="/fonts/gambetta/Gambetta-Variable.woff2" crossorigin="anonymous" as="font" type="font/woff2" />
<link rel="preload" href="/fonts/gambetta/Gambetta-VariableItalic.woff2" crossorigin="anonymous" as="font" type="font/woff2" />

<meta name="description" content={description} />
{import.meta.env.PROD ? (
	<meta name="robots" content="follow, index, max-snippet:-1, max-video-preview:-1, max-image-preview:large" />
) : (
	<meta name="robots" content="follow, noindex" />
)}
<meta name="copyright" content="J.M.A. Eatmon" />
{type === "article" && <meta name="author" content="John Eatmon" />}

<meta property="og:locale" content="en_US" />
<meta property="og:type" content={type} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:url" content={Astro.canonicalURL} />
<meta property="og:site_name" content="J.M.A. Eatmon" />
{dateModified && <meta property="og:updated_time" content={dateModified} />}
{image && (
	<meta property="og:image" content={image.href} />
	<meta property="og:image:alt" content={image.alt} />
	<meta property="og:image:width" content="1200" />
	<meta property="og:image:height" content="630" />
	<meta property="og:image:type" content="image/png" />
)}

{(type === "article") && <meta property="article:publisher" content={Astro.site} />}
{section && <meta property="article:section" content={section} />}
{tags && (tags.map((tag) => 
	<meta property="article:tag" content={tag} />
))}
{datePublished && <meta property="article:published_time" content={datePublished} />}
{dateModified && <meta property="article:modified_time" content={dateModified} />}

<meta name="twitter:dnt" content="on" />
<meta name="twitter:site" content="@jmaeat" />
<meta name="twitter:creator" content="@jmaeat" />
<meta name="twitter:domain" content="J.M.A. Eatmon" />
<meta name="twitter:title" content={title} />
<meta name="twitter:description" content={description} />
<meta name="twitter:card" content={image ? "summary_large_image" : "summary"} />
{image && (
	<meta name="twitter:image" content={image.href} />
	<meta name="twitter:image:alt" content={image.alt} />
)}

<meta name="theme-color" content="#1a1922" media="(prefers-color-scheme: dark)" />
<meta name="theme-color" content="#e5e6dd" media="(prefers-color-scheme: light)" />
<meta name="color-scheme" content="light dark" />

<link rel="canonical" href={Astro.canonicalURL} />
<link rel="icon" href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>ðŸ¦™</text></svg>" />
{next && <link rel="next" aria-label="Previous Page" href={new URL(next, Astro.canonicalURL).href} />}
{prev && <link rel="prev" aria-label="Next Page" href={new URL(prev, Astro.canonicalURL).href} />}

{import.meta.env.NODE_ENV === 'production' && (
	<script defer data-domain="jmae.xyz" src="/js/script.js"></script>
)}
